@model FOI_Log.Models.CombinedModel
@{
    ViewBag.Title = "FOICreate";
    //Layout = "~/Views/Shared/DashboardLayout.cshtml";
    Layout = "~/Views/Shared/Layout1.cshtml";
}


<style>
    .ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all {
        background-color: #fff;
        color: #333;
    }

    .select2-container--classic .select2-search--inline .select2-search__field {
        outline: 0;
        box-shadow: none;
        width: 100% !important;
    }
</style>
<h4 style="text-align: center; margin-bottom: 10px;">Create New FOI</h4>
<hr />

@using (Html.BeginForm("FOICreate", "CombinedModel", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group row">
        @Html.LabelFor(model => model.foi.FOI_Received, htmlAttributes: new { @class = "control-label col-md-4" })
        <div class="col-md-6">
            @Html.EditorFor(model => model.foi.FOI_Received, new { htmlAttributes = new { @class = "form-control datepicker", autocomplete = "off" } })
            @Html.ValidationMessageFor(model => model.foi.FOI_Received, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group row">
        @Html.LabelFor(model => model.refDept.Department, "Department", htmlAttributes: new { @class = "control-label col-md-4" })
        <div class="col-md-6">
            @*@Html.DropDownList("Department", (SelectList)ViewBag.Department, htmlAttributes: new { @class = "form-control", id = "dropDownDept", multiple = "multiple" })*@
            <input type="hidden" id="textBoxVal" />
            <select id="Department" name="Department" class="form-control" style="width:100% !important;display:block" multiple></select>
            @Html.ValidationMessageFor(model => model.refDept.Department, "", new { @class = "text-danger" })
        </div>
    </div>

    @*<div class="form-group row">
            @Html.LabelFor(model => model.First_IG_Team_Chase, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-6">
                @Html.EditorFor(model => model.First_IG_Team_Chase, new { htmlAttributes = new { @class = "form-control datepicker1" } })
                @Html.ValidationMessageFor(model => model.First_IG_Team_Chase, "", new { @class = "text-danger" })
            </div>
        </div>*@

    @*<div class="form-group row">
            @Html.LabelFor(model => model.Response_Sent_to_Requestor, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-6">
                @Html.EditorFor(m => m.Response_Sent_to_Requestor, new { htmlAttributes = new { @class = "form-control datepicker3" } })
                @Html.ValidationMessageFor(model => model.Response_Sent_to_Requestor, "", new { @class = "text-danger" })
            </div>
        </div>*@

    <div class="form-group row">
        @Html.LabelFor(model => model.foi.Association_or_Previous_Request, htmlAttributes: new { @class = "control-label col-md-4" })
        <div class="col-md-6">
            @Html.EditorFor(model => model.foi.Association_or_Previous_Request, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
            @Html.ValidationMessageFor(model => model.foi.Association_or_Previous_Request, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group row">
        @Html.LabelFor(model => model.foi.Requestor_Name, htmlAttributes: new { @class = "control-label col-md-4" })
        <div class="col-md-6">
            @Html.EditorFor(model => model.foi.Requestor_Name, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
            @Html.ValidationMessageFor(model => model.foi.Requestor_Name, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group row">
        @Html.LabelFor(model => model.foi.Requestor_Email, htmlAttributes: new { @class = "control-label col-md-4" })
        <div class="col-md-6">
            @Html.EditorFor(model => model.foi.Requestor_Email, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
            @Html.ValidationMessageFor(model => model.foi.Requestor_Email, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group row">
        @Html.LabelFor(model => model.foi.Information_Sought, htmlAttributes: new { @class = "control-label col-md-4" })
        <div class="col-md-6">
            @Html.TextAreaFor(m => m.foi.Information_Sought, new { @class = "textarea-editor", @rows = 6, @style = "max-width:100%", autocomplete = "off" })
            @Html.ValidationMessageFor(model => model.foi.Information_Sought, "", new { @class = "text-danger" })
        </div>
    </div>

    @*<div class="form-group row">
            @Html.LabelFor(model => model.Comments, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-6">
                @Html.TextAreaFor(m => m.Comments, new { @class = "form-control", @rows = 6, @style = "max-width:60%" })
                @Html.ValidationMessageFor(model => model.Comments, "", new { @class = "text-danger" })
            </div>
        </div>*@

    <div class="form-group row">
        @Html.LabelFor(model => model.foi.Status_Code, "Status Code", htmlAttributes: new { @class = "control-label col-md-4" })
        <div class="col-md-6">
            @Html.DropDownList("Status_Code", null, "Select Status Code", htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.foi.Status_Code, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group row">
        @Html.LabelFor(model => model.foi.Area_of_Interest_Code, "Area of Interest Code", htmlAttributes: new { @class = "control-label col-md-4" })
        <div class="col-md-6">
            @Html.DropDownList("Area_of_Interest_Code", null, "Select Area of Interest Code", htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.foi.Area_of_Interest_Code, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group row">
        @Html.LabelFor(model => model.foi.Uploaded_Document_Path, "Area of Interest Code", htmlAttributes: new { @class = "control-label col-md-4" })
        <div class="col-md-6">
            @Html.TextBox("file", "", new { type = "file" }) <br />
            @Html.ValidationMessageFor(model => model.foi.Uploaded_Document_Path, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group row">
        <div class="col-md-12" style="text-align:center">
            <input type="submit" value="Create FOI" class="btn btn-success" />&nbsp;&nbsp;&nbsp;
            <span class="btn btn-warning" style="color:white"> @Html.ActionLink("Cancel", "FOIDashboard", null, new { Style = "color:White" })</span>
        </div>
    </div>
</div>
}
@if (ViewBag.Message != null)
{
    <script type="text/javascript">

            window.onload = function () {
                alert("@ViewBag.Message");
            };
    </script>

}
<link href="~/Content/themes/base/datepicker.css" rel="stylesheet" />

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    @*@Scripts.Render("~/bundles/jqueryui")*@



    <script src="~/Scripts/jquery-ui-1.12.1.min.js"></script>
    <link href="~/Content/css/select2.min.css" rel="stylesheet" />
    <script src="~/Scripts/select2.js"></script>
    <script>

        $(document).ready(function () {
            $("#Department").select2({
                placeholder: "Select departments",
                allowClear: true,
                theme: "classic",
                ajax: {
                    //url: "/Forms/FOI_Log/FOI_Log/CombinedModel/GetDepartment",
                    url: "/CombinedModel/GetDepartment",
                    dataType: "json",
                    data: function (params) {
                        return {
                            searchTerm: params.term
                        };
                    },
                    processResults: function (data, params) {
                        console.log(data);
                        return {
                            results: data
                        };
                    }
                }
            });
        });
        $('form').each(function () {
            if ($(this).data('validator'))
                $(this).data('validator').settings.ignore = ".note-editor *";
        });
    </script>

    <script type="text/javascript">

        $(document).ready(function () {
            $(".datepicker,.datepicker1,.datepicker2,.datepicker3").datepicker({
                dateFormat: "dd/mm/yy",
                changeMonth: true,
                changeYear: true,
                yearRange: "-60:+0"
            });
        });


        jQuery.validator.methods.date = function (value, element) {
            var isChrome = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
            if (isChrome) {
                var d = new Date();
                return this.optional(element) || !/Invalid|NaN/.test(new Date(d.toLocaleDateString(value)));
            } else {
                return this.optional(element) || !/Invalid|NaN/.test(new Date(value));
            }
        };

        @*@if (!ViewContext.ViewData.ModelState.IsValid) {
            var sb = new System.Text.StringBuilder();
            foreach(var modelState in ViewContext.ViewData.ModelState.Values)
            {
                foreach(var error in modelState.Errors)
                {
                    sb.Append(error.ErrorMessage);
                }
            }
            @: alert('@sb.ToString()');
        }*@


    </script>



    @*<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>*@


    <!-- include summernote css/js -->
    @*<link href="https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote.min.css" rel="stylesheet">
        <link href="https://cdnjs.cloudflare.com/ajax/libs/summernote/0.8.2/summernote.css" rel="stylesheet">
        <script src="https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote.min.js"></script>
        <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/summernote/0.8.2/summernote.js"></script>*@
    <link href="https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote.min.css" rel="stylesheet">
    <link href="~/Scripts/summernote/summernote.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote.min.js"></script>
    <script src="~/Scripts/summernote/summernote.js"></script>
    <script>
        //jQuery.validator.setDefaults({
        //    // This will ignore all hidden elements alongside `contenteditable` elements
        //    // that have no `name` attribute
        //    ignore: ":hidden, [contenteditable='true']:not([name])"
        //});
        //$(document).ready(function () {
        // Initialize Editor
        $('.textarea-editor').summernote({
            //toolbar: [
            //    // [groupName, [list of button]]
            //    ['style', ['style']],
            //    ['style', ['bold', 'italic', 'underline', 'clear']],
            //    ['font', ['strikethrough', 'superscript', 'subscript']],
            //    ['fontsize', ['fontsize']],
            //    ['color', ['color']],
            //    ['para', ['ul', 'ol', 'paragraph']],
            //    ['height', ['height']],
            //    ['fontname', ['fontname']],
            //    ['table', ['table']],
            //    ['insert', ['link', 'picture', 'video']],
            //    ['view', ['fullscreen', 'codeview', 'help']]
            //],

            height: 300, // set editor height
            minHeight: null, // set minimum height of editor
            maxHeight: null, // set maximum height of editor
            focus: true // set focus to editable area after initializing summernote
        });

                        //});
    </script>

}

